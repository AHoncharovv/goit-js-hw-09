{"version":3,"sources":["js/03-promises.js"],"names":["formSubmit","document","querySelector","formInput","querySelectorAll","handleSubmit","event","preventDefault","firstDelay","Number","value","step","amount","position","counterMs","setTimeout","createPromise","then","delay","console","log","catch","intervalId","setInterval","clearInterval","Promise","resolve","reject","Math","random","addEventListener"],"mappings":";AAAA,MAAMA,EAAaC,SAASC,cAAc,QACpCC,EAAYF,SAASG,iBAAiB,SAI5C,SAASC,EAAaC,GACpBA,EAAMC,iBACFC,IAAAA,EAAaC,OAAON,EAAU,GAAGO,OAC/BC,MAAAA,EAAOF,OAAON,EAAU,GAAGO,OAC3BE,EAASH,OAAON,EAAU,GAAGO,OAC/BG,IAAAA,EAAW,EACXC,EAAYN,EAEhBO,WAAW,KAETC,EAAcH,EAAUL,GACnBS,KAAK,EAAGJ,SAAAA,EAAUK,MAAAA,MACjBC,QAAQC,2BAA2BP,QAAeK,SAEnDG,MAAM,EAAGR,SAAAA,EAAUK,MAAAA,MAClBC,QAAQC,0BAA0BP,QAAeK,SAGvDV,EAAaG,EAEPW,MAAAA,EAAaC,YAAY,KAG7BT,GAAaH,GADbE,GAAY,KAGKD,GACfY,cAAcF,GAEhBN,EAAcH,EAAUC,GACrBG,KAAK,EAAGJ,SAAAA,EAAUK,MAAAA,MACjBC,QAAQC,2BAA2BP,QAAeK,SAEnDG,MAAM,EAAGR,SAAAA,EAAUK,MAAAA,MAClBC,QAAQC,0BAA0BP,QAAeK,UAEpDV,IACFA,GAGL,SAASQ,EAAcH,EAAUK,GAExB,OAAA,IAAIO,QAAQ,CAACC,EAASC,KACPC,KAAKC,SAAW,GAGpCH,EAAQ,CAACb,SAAAA,EAAUK,MAAAA,IAEnBS,EAAO,CAACd,SAAAA,EAAUK,MAAAA,MAjDtBlB,EAAW8B,iBAAiB,SAAUzB","file":"03-promises.06f93f22.js","sourceRoot":"../src","sourcesContent":["const formSubmit = document.querySelector('form');\nconst formInput = document.querySelectorAll('input');\n\nformSubmit.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  let firstDelay = Number(formInput[0].value);\n  const step = Number(formInput[1].value);\n  const amount = Number(formInput[2].value);\n  let position = 1;\n  let counterMs = firstDelay;\n  \n  setTimeout(() => {\n    \n    createPromise(position, firstDelay)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n   \n    firstDelay = step;\n\n    const intervalId = setInterval(() => {\n\n      position += 1;\n      counterMs += step;\n      \n      if (position === amount) {\n        clearInterval(intervalId);\n      };\n      createPromise(position, counterMs)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }, firstDelay);\n  }, firstDelay);\n};\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n    \n  if (shouldResolve) {\n    resolve({position, delay});\n  } else {\n    reject({position, delay});\n  }\n  })\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}